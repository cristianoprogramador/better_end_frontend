{
  "home": {
    "welcome": "Welcome to Better-end",
    "compare": "Compare the performance of SQL and NoSQL databases through various operations.",
    "betterend": "Better-end is a tool designed to help developers understand the performance differences between SQL and NoSQL databases. By testing various operations like data insertion, retrieval, updating, and deletion, you can see firsthand how each database type performs under different scenarios.",
    "data_insertion": "Data Insertion (POST)",
    "data_insertion_description": "Test how quickly data can be inserted into SQL and NoSQL databases.",
    "data_retrieval": "Data Retrieval (GET)",
    "data_retrieval_description": "Compare the speed of data retrieval with complex queries.",
    "data_update": "Data Update (UPDATE)",
    "data_update_description": "See how efficiently data can be updated in both database types.",
    "data_deletion": "Data Deletion (DELETE)",
    "data_deletion_description": "Understand the performance of data deletion operations.",
    "frontend_code": "Frontend Code",
    "frontend_code_description": "Access the frontend code repository on GitHub.",
    "backend_code": "Backend Code",
    "backend_code_description": "Access the backend code repository on GitHub."
  },
  "post": {
    "performance": "Performance Comparison: SQL vs NoSQL",
    "download_file": "Download the File",
    "download_description": "(Click here to download and see the content)",
    "loading": "Loading...",
    "click_to_load": "Click to Load",
    "sql": "SQL",
    "nosql": "NoSQL",
    "postgresql": "(PostgreSQL)",
    "mongodb": "(MongoDB)",
    "average_speed_description": "Above we will show the average speed for the backend to get the file and register in the appropriate tables.",
    "backend_functions_description": "Below you will be able to understand the functions performed what is being done in the backend, the file in question has 11,952 lines and 21 columns, only 1,612KB in size and you can test the entire process by downloading the backend code and testing by yourself.",
    "results_note": "(you can get different results depending on your machine)"
  },
  "get": {
    "performance": "Performance Comparison: SQL vs NoSQL",
    "download_file": "Download the File",
    "download_description": "(Click here to download the JSON result file)",
    "loading": "Loading...",
    "click_to_filter": "Click to Filter",
    "sql": "SQL",
    "nosql": "NoSQL",
    "postgresql": "(PostgreSQL)",
    "mongodb": "(MongoDB)",
    "query_description": "The query retrieves orders that include products from the 'Fruits' category and where the order status is 'Shipped'. This demonstrates the performance of MongoDB and PostgreSQL when filtering data through lookups, unwinds, and multiple joins.",
    "sql_performance": "PostgreSQL is generally faster for relational queries due to its optimized query planner and execution engine. MongoDB, being a NoSQL database, excels in scenarios involving large volumes of unstructured data and provides flexibility in schema design.",
    "json_note": "(the JSON result is the same for both databases)",
    "sql_query_explanation": "For PostgreSQL, the query uses efficient SQL joins and indexing to quickly filter and retrieve the data. PostgreSQL's optimized query planner helps in determining the most efficient way to execute the query, ensuring faster response times for relational data.",
    "mongodb_query_explanation": "For MongoDB, the query involves the use of the aggregation framework, which includes stages like `$lookup` for joining collections and `$unwind` for deconstructing arrays. MongoDB's flexibility in handling unstructured data allows for complex aggregations but may result in longer processing times compared to traditional SQL databases.",
    "example": "Example:"
  },
  "update": {
    "performance": "Performance Comparison: SQL vs NoSQL",
    "update_description": "The update operation changes the status of all orders from 'Pending' to 'Updated' for the months of June and July, and increments the quantity of related order items. This demonstrates the performance of MongoDB and PostgreSQL when performing complex updates involving multiple collections/tables.",
    "loading": "Loading...",
    "click_to_update": "Click to Update",
    "sql": "SQL",
    "nosql": "NoSQL",
    "postgresql": "(PostgreSQL)",
    "mongodb": "(MongoDB)",
    "sql_performance": "PostgreSQL is generally faster for relational queries due to its optimized query planner and execution engine. MongoDB, being a NoSQL database, excels in scenarios involving large volumes of unstructured data and provides flexibility in schema design.",
    "sql_update_explanation": "For PostgreSQL, the update operation uses efficient SQL queries to modify the status of orders and increment the quantity of order items. The optimized query planner ensures quick execution of complex updates across multiple tables.",
    "mongodb_update_explanation": "For MongoDB, the update operation leverages the aggregation framework and update operations to change the status of orders and increment the quantity of order items. While MongoDB handles unstructured data flexibly, it may take longer for complex updates compared to traditional SQL databases.",
    "postgresql_function": "PostgreSQL Update Function:",
    "mongodb_function": "MongoDB Update Function:"
  },
  "delete": {
    "performance": "Performance Comparison: SQL vs NoSQL",
    "delete_description": "The delete operation removes old orders and their related items from the database. This demonstrates the performance of MongoDB and PostgreSQL when performing complex deletions involving multiple collections/tables.",
    "loading": "Loading...",
    "click_to_delete": "Click to Delete",
    "sql": "SQL",
    "nosql": "NoSQL",
    "postgresql": "(PostgreSQL)",
    "mongodb": "(MongoDB)",
    "sql_performance": "PostgreSQL is generally faster for relational queries due to its optimized query planner and execution engine. MongoDB, being a NoSQL database, excels in scenarios involving large volumes of unstructured data and provides flexibility in schema design.",
    "sql_delete_explanation": "For PostgreSQL, the delete operation uses efficient SQL queries to remove old orders and their related items. The optimized query planner ensures quick execution of complex deletions across multiple tables.",
    "mongodb_delete_explanation": "For MongoDB, the delete operation leverages the aggregation framework and delete operations to remove old orders and their related items. While MongoDB handles unstructured data flexibly, it may take longer for complex deletions compared to traditional SQL databases.",
    "postgresql_function": "PostgreSQL Delete Function:",
    "mongodb_function": "MongoDB Delete Function:"
  },
  "which_one": {
    "title": "Which one should I use: SQL vs NoSQL",
    "scoreboard": "Scoreboard",
    "recommendation": "Recommendation",
    "test_another_question": "+ Test another question",
    "sql": "SQL",
    "nosql": "NoSQL"
  },
  "main_layout": {
    "post": "Data Submission",
    "get": "Search for Information",
    "update": "Update data",
    "delete": "Delete Information",
    "which_one": "Which should I use?"
  }
}
